from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import logging

from services.user_service import UserService
from services.referral_service import ReferralService
from bot.keyboards.inline import get_consent_keyboard, get_main_menu_keyboard
from bot.utils.messages import MESSAGES
from database.models import UserRole

logger = logging.getLogger(__name__)
router = Router()

class OnboardingStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_consent = State()

user_service = UserService()
referral_service = ReferralService()



@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –±—Ä–æ–∫–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
    broker_ref_code = None
    if message.text and len(message.text.split()) > 1:
        broker_ref_code = message.text.split()[1]
        
        # –¢—Ä–µ–∫–∞–µ–º –∫–ª–∏–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        await referral_service.track_referral_click(
            ref_code=broker_ref_code,
            telegram_id=message.from_user.id
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            MESSAGES["welcome_back"].format(
                name=user.first_name or message.from_user.first_name
            ),
            reply_markup=get_main_menu_keyboard(user.role)
        )
        await state.clear()
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await state.update_data(broker_ref_code=broker_ref_code)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            broker_ref_code=broker_ref_code
        )
        
        # –¢—Ä–µ–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        if broker_ref_code:
            await referral_service.track_referral_registration(
                user_id=user.id,
                ref_code=broker_ref_code
            )
        
        welcome_text = MESSAGES["welcome_new_user"].format(
            name=message.from_user.first_name
        )
        
        if broker_ref_code:
            welcome_text += MESSAGES["broker_referral_info"]
        
        await message.answer(welcome_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await message.answer(
            MESSAGES["request_phone"],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", 
                    callback_data="share_contact"
                )]
            ])
        )
        await state.set_state(OnboardingStates.waiting_for_phone)

@router.callback_query(F.data == "share_contact")
async def request_contact(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.edit_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    await callback.message.answer(
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(F.contact, StateFilter(OnboardingStates.waiting_for_phone))
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    from aiogram.types import ReplyKeyboardRemove
    
    if message.contact.user_id != message.from_user.id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞ –Ω–µ —á—É–∂–æ–π.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    await user_service.update_user_contact_info(user.id, phone=phone)
    
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" + MESSAGES["request_email"],
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OnboardingStates.waiting_for_email)

@router.message(F.text, StateFilter(OnboardingStates.waiting_for_phone))
async def process_phone_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–º"""
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_pattern = r'^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    if not re.match(phone_pattern, phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: +79123456789"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    phone = re.sub(r'[\s\-\(\)]', '', phone)
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif phone.startswith('7'):
        phone = '+7' + phone[1:]
    elif not phone.startswith('+7'):
        phone = '+7' + phone
    
    await state.update_data(phone=phone)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    await user_service.update_user_contact_info(user.id, phone=phone)
    
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" + MESSAGES["request_email"]
    )
    await state.set_state(OnboardingStates.waiting_for_email)

@router.message(F.text, StateFilter(OnboardingStates.waiting_for_email))
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∞–¥—Ä–µ—Å–∞"""
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: example@mail.com"
        )
        return
    
    await state.update_data(email=email)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    await user_service.update_user_contact_info(user.id, email=email)
    
    await message.answer(
        "‚úÖ Email –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" + MESSAGES["request_consent"],
        reply_markup=get_consent_keyboard()
    )
    await state.set_state(OnboardingStates.waiting_for_consent)

@router.callback_query(F.data == "consent_agree", StateFilter(OnboardingStates.waiting_for_consent))
async def process_consent_agree(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    await user_service.set_user_consent(
        user.id,
        pd_consent=True,
        application_consent=True
    )
    
    await callback.message.edit_text(
        "‚úÖ " + MESSAGES["consent_accepted"],
        reply_markup=None
    )
    
    await callback.message.answer(
        MESSAGES["onboarding_complete"],
        reply_markup=get_main_menu_keyboard(UserRole.CLIENT)
    )
    
    await state.clear()
    await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@router.callback_query(F.data == "consent_decline", StateFilter(OnboardingStates.waiting_for_consent))
async def process_consent_decline(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è"""
    
    await callback.message.edit_text(
        MESSAGES["consent_declined"],
        reply_markup=None
    )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "show_consent_details")
async def show_consent_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    
    await callback.message.answer(
        MESSAGES["consent_details"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ù–∞–∑–∞–¥ –∫ —Å–æ–≥–ª–∞—Å–∏—é", callback_data="back_to_consent")]
        ])
    )
    await callback.answer() 