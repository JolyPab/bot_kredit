from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database.models import User, UserRole
from services.broker_auth_service import BrokerAuthService
from services.user_service import UserService

logger = logging.getLogger(__name__)
router = Router()

broker_auth_service = BrokerAuthService()
user_service = UserService()

class BrokerApplicationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_company = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_experience = State()

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–µ–º–æ-–∫–Ω–æ–ø–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞—è–≤–æ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É
@router.callback_query(F.data == "become_broker_demo")
async def start_broker_application(callback: CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–æ–º"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—Ä–æ–∫–µ—Ä –ª–∏ —É–∂–µ
    if user.role == UserRole.BROKER:
        await callback.message.edit_text(
            "‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –±—Ä–æ–∫–µ—Ä–æ–º!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë®‚Äçüíº –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="broker_mode"
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="settings"
                )]
            ])
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
    existing_app = await broker_auth_service.get_user_application_status(user.telegram_id)
    
    if existing_app:
        if existing_app.status == "pending":
            await callback.message.edit_text(
                f"""‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                
üìã –ó–∞—è–≤–∫–∞ #{existing_app.id}
üìÖ –ü–æ–¥–∞–Ω–∞: {existing_app.created_at.strftime('%d.%m.%Y %H:%M')}
‚ö° –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏

–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="settings"
                    )]
                ])
            )
            await callback.answer()
            return
        elif existing_app.status == "approved":
            await callback.message.edit_text(
                f"""‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!
                
üìã –ó–∞—è–≤–∫–∞ #{existing_app.id}
üìÖ –û–¥–æ–±—Ä–µ–Ω–∞: {existing_app.processed_at.strftime('%d.%m.%Y %H:%M')}

–í–∞–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        callback_data="contact_support"
                    )],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="settings"
                    )]
                ])
            )
            await callback.answer()
            return
        elif existing_app.status == "rejected":
            reason = existing_app.admin_comment or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            await callback.message.edit_text(
                f"""‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
                
üìã –ó–∞—è–≤–∫–∞ #{existing_app.id}
üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {existing_app.processed_at.strftime('%d.%m.%Y %H:%M')}
üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}

–ú–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É",
                        callback_data="new_broker_application"
                    )],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="settings"
                    )]
                ])
            )
            await callback.answer()
            return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    await start_new_application(callback, state)

@router.callback_query(F.data == "new_broker_application")
async def start_new_application(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
    
    await state.set_state(BrokerApplicationStates.waiting_for_name)
    
    text = """üìù –ó–ê–Ø–í–ö–ê –ù–ê –°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–†–û–ö–ï–†–û–ú

–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π.

üë§ –®–∞–≥ 1 –∏–∑ 5: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?
–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="settings"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.message(StateFilter(BrokerApplicationStates.waiting_for_name))
async def process_broker_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –±—Ä–æ–∫–µ—Ä–∞"""
    
    full_name = message.text.strip()
    
    if len(full_name) < 3:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
        return
    
    await state.update_data(full_name=full_name)
    await state.set_state(BrokerApplicationStates.waiting_for_company)
    
    await message.answer(
        f"""‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_name}

üè¢ –®–∞–≥ 2 –∏–∑ 5: –í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?
–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π"/"–ò–ü" """,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üè† –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π",
                callback_data="company_self_employed"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="settings"
            )]
        ])
    )

@router.callback_query(F.data == "company_self_employed", StateFilter(BrokerApplicationStates.waiting_for_company))
async def set_self_employed(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å"""
    await state.update_data(company="–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π")
    await process_company_next_step(callback, state, "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π")

@router.message(StateFilter(BrokerApplicationStates.waiting_for_company))
async def process_broker_company(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –±—Ä–æ–∫–µ—Ä–∞"""
    
    company = message.text.strip()
    await state.update_data(company=company)
    await process_company_next_step(message, state, company)

async def process_company_next_step(event, state: FSMContext, company: str):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø–æ—Å–ª–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    await state.set_state(BrokerApplicationStates.waiting_for_phone)
    
    text = f"""‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {company}

üìû –®–∞–≥ 3 –∏–∑ 5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
            callback_data="share_phone_broker"
        )],
        [InlineKeyboardButton(
            text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="skip_phone_broker"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="settings"
        )]
    ])
    
    if hasattr(event, 'message'):
        # –≠—Ç–æ CallbackQuery
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()
    else:
        # –≠—Ç–æ Message
        await event.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "skip_phone_broker", StateFilter(BrokerApplicationStates.waiting_for_phone))
async def skip_phone_broker(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""
    await state.update_data(phone=None)
    await process_phone_next_step(callback, state)

@router.message(StateFilter(BrokerApplicationStates.waiting_for_phone))
async def process_broker_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—Ä–æ–∫–µ—Ä–∞"""
    
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await process_phone_next_step(message, state)

async def process_phone_next_step(event, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ email"""
    
    await state.set_state(BrokerApplicationStates.waiting_for_email)
    
    text = """üìß –®–∞–≥ 4 –∏–∑ 5: Email –¥–ª—è —Å–≤—è–∑–∏
–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π email –∞–¥—Ä–µ—Å"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="skip_email_broker"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="settings"
        )]
    ])
    
    if hasattr(event, 'message'):
        # –≠—Ç–æ CallbackQuery
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()
    else:
        # –≠—Ç–æ Message
        await event.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "skip_email_broker", StateFilter(BrokerApplicationStates.waiting_for_email))
async def skip_email_broker(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å email"""
    await state.update_data(email=None)
    await process_email_next_step(callback, state)

@router.message(StateFilter(BrokerApplicationStates.waiting_for_email))
async def process_broker_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –±—Ä–æ–∫–µ—Ä–∞"""
    
    email = message.text.strip()
    await state.update_data(email=email)
    await process_email_next_step(message, state)

async def process_email_next_step(event, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—ã—Ç—É"""
    
    await state.set_state(BrokerApplicationStates.waiting_for_experience)
    
    text = """üíº –®–∞–≥ 5 –∏–∑ 5: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ:
‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è/—Ñ–∏–Ω–∞–Ω—Å–æ–≤?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏?
‚Ä¢ –û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?

–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="skip_experience_broker"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="settings"
        )]
    ])
    
    if hasattr(event, 'message'):
        # –≠—Ç–æ CallbackQuery
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()
    else:
        # –≠—Ç–æ Message
        await event.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "skip_experience_broker", StateFilter(BrokerApplicationStates.waiting_for_experience))
async def skip_experience_broker(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø—ã—Ç"""
    await state.update_data(experience=None)
    await submit_broker_application(callback, state)

@router.message(StateFilter(BrokerApplicationStates.waiting_for_experience))
async def process_broker_experience(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—ã—Ç–∞ –±—Ä–æ–∫–µ—Ä–∞"""
    
    experience = message.text.strip()
    await state.update_data(experience=experience)
    await submit_broker_application(message, state)

async def submit_broker_application(event, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
    
    data = await state.get_data()
    user_id = event.from_user.id
    username = event.from_user.username
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application = await broker_auth_service.create_broker_application(
            telegram_id=user_id,
            username=username,
            full_name=data['full_name'],
            company=data.get('company'),
            phone=data.get('phone'),
            email=data.get('email'),
            experience=data.get('experience')
        )
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        # await notify_admin_about_application(application)
        
        text = f"""‚úÖ –ó–ê–Ø–í–ö–ê –ü–û–î–ê–ù–ê!

üìã ‚Ññ{application.id} –æ—Ç {application.created_at.strftime('%d.%m.%Y %H:%M')}

üë§ {data['full_name']}
üè¢ {data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ (1-2 –¥–Ω—è)
–ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥."""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
        
        if hasattr(event, 'message'):
            # –≠—Ç–æ CallbackQuery
            await event.message.edit_text(text, reply_markup=keyboard)
            await event.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!")
        else:
            # –≠—Ç–æ Message
            await event.answer(text, reply_markup=keyboard)
        
        await state.clear()
        
    except ValueError as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        if hasattr(event, 'message'):
            # –≠—Ç–æ CallbackQuery
            await event.message.edit_text(error_text)
            await event.answer()
        else:
            # –≠—Ç–æ Message
            await event.answer(error_text)

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤
@router.message(Command("activate"))
async def activate_invite_code(message: Message, user: User):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥"""
    
    if not user:
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ /start")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/activate BR_2024_ABC`

–ü—Ä–∏–º–µ—Ä: `/activate BR_2024_K7M`"""
        )
        return
    
    code = parts[1].upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—Ä–æ–∫–µ—Ä –ª–∏ —É–∂–µ
    if user.role == UserRole.BROKER:
        await message.answer("‚úÖ –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –±—Ä–æ–∫–µ—Ä–æ–º!")
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–¥
    success = await broker_auth_service.activate_invite_code(code, user.id)
    
    if success:
        await message.answer(
            f"""üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! 

‚úÖ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ `{code}` —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
üë®‚Äçüíº –í—ã —Ç–µ–ø–µ—Ä—å –±—Ä–æ–∫–µ—Ä –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!

–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º  
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ —Å –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç —Å –æ—Ç—á–µ—Ç–∞–º–∏

üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å "–ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç" """,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë®‚Äçüíº –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="broker_mode"
                )],
                [InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )]
            ])
        )
    else:
        await message.answer(
            f"""‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ `{code}`

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
‚Ä¢ –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏

üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="contact_support"
                )]
            ])
        ) 