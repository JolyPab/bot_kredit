from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import json
from datetime import datetime

from database.models import User, ApplicationStatus
from services.application_service import ApplicationService
from services.user_service import UserService
from bot.keyboards.inline import get_status_keyboard, get_back_button
from bot.utils.messages import MESSAGES

logger = logging.getLogger(__name__)
router = Router()

application_service = ApplicationService()
user_service = UserService()

@router.callback_query(F.data == "check_status")
async def check_application_status(callback: CallbackQuery, user: User):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application = await application_service.get_user_application(user.id)
    
    if not application:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        text = """üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
        
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ë–ö–ò."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                callback_data="start_diagnosis"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
        status_description = application_service.get_status_description(application.status)
        next_step = application_service.get_next_step_description(application.status)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents_count = len(application.documents) if application.documents else 0
        
        # –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        time_diff = datetime.utcnow() - application.created_at
        if time_diff.days > 0:
            time_text = f"{time_diff.days} –¥–Ω."
        elif time_diff.seconds > 3600:
            hours = time_diff.seconds // 3600
            time_text = f"{hours} —á."
        else:
            minutes = time_diff.seconds // 60
            time_text = f"{minutes} –º–∏–Ω."
        
        text = f"""üìä –°–¢–ê–¢–£–° –í–ê–®–ï–ô –ó–ê–Ø–í–ö–ò #{application.id}

‚ö° –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_description}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')} ({time_text} –Ω–∞–∑–∞–¥)
üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {documents_count}

üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:
{next_step}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if application.target_bank:
            text += f"\nüè¶ –¶–µ–ª–µ–≤–æ–π –±–∞–Ω–∫: {application.target_bank}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if application.status == ApplicationStatus.DIAGNOSIS_COMPLETED and application.diagnosis_result:
            text += "\n\n‚úÖ GPT –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É."
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        has_diagnosis_results = (
            application.status == ApplicationStatus.DIAGNOSIS_COMPLETED and 
            application.diagnosis_result is not None
        )
        keyboard = get_status_keyboard(has_diagnosis_results)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "refresh_status")
async def refresh_application_status(callback: CallbackQuery, user: User):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î
    application = await application_service.get_user_application(user.id)
    
    if not application:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await user_service.log_user_action(
        user.id,
        "status_refresh",
        {"application_id": application.id}
    )
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞
    await check_application_status(callback, user)
    await callback.answer("üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "detailed_status")
async def show_detailed_status(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    application = await application_service.get_user_application(user.id)
    
    if not application:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –∑–∞—è–≤–∫–∏
    timeline = await application_service.get_application_timeline(application.id)
    
    text = f"""üìã –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–Ø–í–ö–ï #{application.id}

üìÖ –°–æ–∑–¥–∞–Ω–∞: {application.created_at.strftime('%d.%m.%Y –≤ %H:%M')}
üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(application.documents) if application.documents else 0}
‚ö° –°—Ç–∞—Ç—É—Å: {application_service.get_status_description(application.status)}

üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    for i, event in enumerate(timeline[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
        date_str = event['date'].strftime('%d.%m %H:%M')
        status_desc = application_service.get_status_description(
            ApplicationStatus(event['status'])
        )
        text += f"\n‚Ä¢ {date_str} - {status_desc}"
        if event['comment']:
            text += f" ({event['comment']})"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (application.status == ApplicationStatus.DIAGNOSIS_COMPLETED and 
        application.diagnosis_result):
        text += "\n\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤—ã!"
        
        if application.recommendations:
            recommendations_lines = application.recommendations.split('\n')[:3]
            text += f"\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in recommendations_lines:
                text += f"‚Ä¢ {rec}\n"
            
            if len(application.recommendations.split('\n')) > 3:
                text += "‚Ä¢ ..."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìÑ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            callback_data="my_documents"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É",
            callback_data="check_status"
        )],
        [InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "view_diagnosis_results")
async def view_diagnosis_results(callback: CallbackQuery, user: User):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    application = await application_service.get_user_application(user.id)
    
    if not application or application.status != ApplicationStatus.DIAGNOSIS_COMPLETED:
        await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await user_service.log_user_action(
        user.id,
        "diagnosis_results_viewed",
        {"application_id": application.id}
    )
    
    text = f"""üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ö–ò

üìã –ó–∞—è–≤–∫–∞ #{application.id}
‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {application.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}

"""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if application.recommendations:
        text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
        recommendations = application.recommendations.split('\n')
        for i, rec in enumerate(recommendations[:5], 1):
            if rec.strip():
                text += f"{i}. {rec.strip()}\n"
        
        if len(recommendations) > 5:
            text += f"...–∏ –µ—â–µ {len(recommendations) - 5} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    else:
        text += "üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –ë–ö–ò",
            callback_data="submit_applications"
        )],
        [InlineKeyboardButton(
            text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            callback_data="contact_support"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É",
            callback_data="check_status"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "submit_applications")
async def submit_applications_confirmation(callback: CallbackQuery, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ –ë–ö–ò"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    application = await application_service.get_user_application(user.id)
    
    if not application or application.status != ApplicationStatus.DIAGNOSIS_COMPLETED:
        await callback.answer("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–ª–µ–Ω–∏–π
    permissions = await user_service.check_user_permissions(user)
    if not permissions['can_submit_applications']:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–∏–π.",
            reply_markup=get_back_button()
        )
        await callback.answer()
        return
    
    text = """üì§ –ü–û–î–ê–ß–ê –ó–ê–Ø–í–õ–ï–ù–ò–ô –í –ë–ö–ò

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.

üìã –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:
‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ë–ö–ò
‚Ä¢ –ù–∞—á–Ω–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è (–¥–æ 30 –¥–Ω–µ–π)

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–¥–∞—á—É –∑–∞—è–≤–ª–µ–Ω–∏–π?"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –î–∞, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è",
            callback_data="confirm_submit_applications"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="view_diagnosis_results"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "confirm_submit_applications")
async def confirm_submit_applications(callback: CallbackQuery, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    application = await application_service.get_user_application(user.id)
    
    if not application:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
    success = await application_service.update_application_status(
        application.id,
        ApplicationStatus.APPLICATIONS_SENT,
        "–ó–∞—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞–Ω—ã –≤ –ë–ö–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        "user"
    )
    
    if success:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user_service.log_user_action(
            user.id,
            "applications_submitted",
            {"application_id": application.id}
        )
        
        text = """‚úÖ –ó–ê–Ø–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–û–î–ê–ù–´!

üì§ –í–∞—à–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ë–ö–ò.

‚è∞ –°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:
‚Ä¢ –ù–ë–ö–ò: –¥–æ 30 –¥–Ω–µ–π
‚Ä¢ –û–ö–ë: –¥–æ 30 –¥–Ω–µ–π  
‚Ä¢ –≠–∫–≤–∏—Ñ–∞–∫—Å: –¥–æ 30 –¥–Ω–µ–π

üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ú—ã –±—É–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–æ—Ç–µ."""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data="check_status"
            )],
            [InlineKeyboardButton(
                text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                callback_data="contact_support"
            )],
            [InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        keyboard = get_back_button()
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "view_gpt_results")
async def view_gpt_diagnosis_results(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã GPT –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    application = await application_service.get_user_application(user.id)
    
    if not application or not application.diagnosis_result:
        await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnosis_data = json.loads(application.diagnosis_result)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "ü§ñ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ GPT –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò**\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö
        blocks = diagnosis_data.get("blocks", {})
        
        if blocks:
            text += "üìã **–ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:**\n\n"
            
            for block_name, block_content in blocks.items():
                if "–æ—à–∏–±–æ–∫ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ" not in block_content.lower():
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                    if "üü•" in block_content:
                        criticality = "üü• –ö–†–ò–¢–ò–ß–ù–û"
                    elif "üü®" in block_content:
                        criticality = "üü® –í–ê–ñ–ù–û"
                    else:
                        criticality = "üü© –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û"
                    
                    text += f"‚ñ´Ô∏è {block_name}\n"
                    text += f"   {criticality}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞
        parsed_at = diagnosis_data.get("parsed_at", "")
        if parsed_at:
            try:
                date_obj = datetime.fromisoformat(parsed_at.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
                text += f"üïê –ê–Ω–∞–ª–∏–∑: {formatted_date}\n\n"
            except:
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        text += "üíº **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫?**\n"
        text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç",
                callback_data="detailed_gpt_report"
            )],
            [InlineKeyboardButton(
                text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è",
                callback_data="contact_support"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="check_status"
            )]
        ])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await user_service.log_user_action(
            user.id,
            "gpt_results_viewed",
            {"application_id": application.id}
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ GPT: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", show_alert=True) 