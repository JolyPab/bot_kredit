from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging
from datetime import datetime, timedelta
from typing import Optional

from database.models import User, UserRole, Broker
from services.user_service import UserService
from services.referral_service import ReferralService
from bot.keyboards.inline import get_broker_menu_keyboard
from bot.utils.messages import MESSAGES

logger = logging.getLogger(__name__)
router = Router()

user_service = UserService()
referral_service = ReferralService()



# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è BrokerService
class BrokerService:
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤"""
    
    async def get_broker_by_telegram_id(self, telegram_id: int) -> Optional[Broker]:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞
        return None
    
    async def get_broker_clients_count(self, broker_id: int) -> int:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
        return 0
    
    async def get_broker_earnings(self, broker_id: int) -> float:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        return 0.0
    
    async def generate_referral_link(self, broker: Broker) -> str:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–∫–∏
        return f"https://t.me/your_bot?start={broker.ref_code if broker else 'DEMO'}"

broker_service = BrokerService()

@router.callback_query(F.data == "broker_mode")
async def enter_broker_mode(callback: CallbackQuery, user: User):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role != UserRole.BROKER and user.role != UserRole.ADMIN:
        await callback.message.edit_text(
            """‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±—Ä–æ–∫–µ—Ä—Å–∫–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.
            
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí¨ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    callback_data="contact_support"
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–∫–µ—Ä–∞
    broker = await broker_service.get_broker_by_telegram_id(user.telegram_id)
    
    if not broker:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        class MockBroker:
            id = user.id
            name = user.first_name or "–ë—Ä–æ–∫–µ—Ä"
            ref_code = f"BR{user.id}"
            commission_rate = 0.15
        
        broker = MockBroker()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    clients_count = await broker_service.get_broker_clients_count(broker.id)
    earnings = await broker_service.get_broker_earnings(broker.id)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü (–∑–∞–≥–ª—É—à–∫–∞)
    month_clients = max(0, clients_count - 5)  # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    active_applications = max(0, clients_count - 2)  # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    
    text = MESSAGES["broker_welcome"].format(
        total_clients=clients_count,
        active_applications=active_applications,
        month_clients=month_clients,
        earnings=earnings
    )
    
    await callback.message.edit_text(text, reply_markup=get_broker_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "broker_clients")
async def show_broker_clients(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    
    text = """üë• –í–ê–®–ò –ö–õ–ò–ï–ù–¢–´

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: 12
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: 7
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: 5

üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:
‚Ä¢ –ò–≤–∞–Ω –ò. - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—á–µ—Ä–∞)
‚Ä¢ –ú–∞—Ä–∏—è –ü. - –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (2 –¥–Ω—è –Ω–∞–∑–∞–¥)
‚Ä¢ –ê–ª–µ–∫—Å–µ–π –°. - –ó–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (3 –¥–Ω—è –Ω–∞–∑–∞–¥)
‚Ä¢ –û–ª—å–≥–∞ –ö. - –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥)

üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫:
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: 15,750 —Ä—É–±.
‚Ä¢ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: 47,250 —Ä—É–±."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="broker_detailed_stats"
        )],
        [InlineKeyboardButton(
            text="üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
            callback_data="broker_export_report"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "broker_stats")
async def show_broker_statistics(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    
    text = f"""üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: 2
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: 1
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: 1,500 —Ä—É–±.

üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: 8
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: 3
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: 4,750 —Ä—É–±.

üìÖ –ó–∞ –º–µ—Å—è—Ü:
‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: 23
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: 12
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: 15,750 —Ä—É–±.

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 85%
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Üí –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π: 92%
‚Ä¢ –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: 78%

üèÜ –†–µ–π—Ç–∏–Ω–≥: 3 –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ –±—Ä–æ–∫–µ—Ä–æ–≤"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º",
            callback_data="broker_daily_chart"
        )],
        [InlineKeyboardButton(
            text="üí∞ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
            callback_data="broker_earnings_detail"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "broker_ref_link")
async def show_referral_link(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–∫–µ—Ä–∞
    broker = await broker_service.get_broker_by_telegram_id(user.telegram_id)
    
    if not broker:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
        class MockBroker:
            ref_code = f"BR{user.id}"
        broker = MockBroker()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    ref_link = await broker_service.generate_referral_link(broker)
    
    text = MESSAGES["broker_ref_link"].format(link=ref_link)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        )],
        [InlineKeyboardButton(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"copy_ref_link_{broker.ref_code}"
        )],
        [InlineKeyboardButton(
            text="üîÑ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞",
            callback_data="regenerate_ref_code"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("copy_ref_link_"))
async def copy_referral_link(callback: CallbackQuery):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    
    ref_code = callback.data.split("_")[-1]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    ref_link = f"https://t.me/your_bot?start={ref_code}"
    
    await callback.answer(
        f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n{ref_link}",
        show_alert=True
    )

@router.callback_query(F.data == "broker_reports")
async def broker_reports(callback: CallbackQuery, user: User):
    """–û—Ç—á–µ—Ç—ã –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üìà –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º",
            callback_data="report_clients"
        )],
        [InlineKeyboardButton(
            text="üí∞ –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É",
            callback_data="report_earnings"
        )],
        [InlineKeyboardButton(
            text="üìÖ –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥",
            callback_data="report_period"
        )],
        [InlineKeyboardButton(
            text="üìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data="report_summary"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "report_summary")
async def generate_summary_report(callback: CallbackQuery, user: User):
    """–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
    await user_service.log_user_action(
        user.id,
        "broker_report_generated",
        {"report_type": "summary"}
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
    report_text = f"""üìã –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ë–†–û–ö–ï–†–ê

üë§ –ë—Ä–æ–∫–µ—Ä: {user.first_name}
üìÖ –ü–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}

üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: 23
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª: 7
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: 12
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 78%

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü: 15,750 —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 1,312 —Ä—É–±.
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 15%

üìà –î–ò–ù–ê–ú–ò–ö–ê:
‚Ä¢ –†–æ—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: +15% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É
‚Ä¢ –†–æ—Å—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞: +23% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É

üèÜ –†–ï–ô–¢–ò–ù–ì: 3 –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º –∑–∞—á–µ—Ç–µ

–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email",
            callback_data="send_report_email"
        )],
        [InlineKeyboardButton(
            text="üìä –î—Ä—É–≥–∏–µ –æ—Ç—á–µ—Ç—ã",
            callback_data="broker_reports"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(report_text, reply_markup=keyboard)
    await callback.answer("üìã –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")

@router.callback_query(F.data == "broker_settings")
async def broker_settings(callback: CallbackQuery, user: User):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–∫–µ—Ä–∞
    broker = await broker_service.get_broker_by_telegram_id(user.telegram_id)
    
    if not broker:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        class MockBroker:
            name = user.first_name or "–ë—Ä–æ–∫–µ—Ä"
            company = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            commission_rate = 0.15
            is_active = True
        broker = MockBroker()
    
    text = f"""‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ë–†–û–ö–ï–†–ê

üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è: {broker.name}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {broker.company}
‚Ä¢ –°—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: {broker.commission_rate * 100}%
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if broker.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ –û –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –û –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞

üíº –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data="broker_notifications"
        )],
        [InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º",
            callback_data="contact_admin"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "broker_ref_link")
async def show_broker_referral_link(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–∫–µ—Ä–∞
    broker = await user_service.get_broker_by_telegram_id(user.telegram_id)
    if not broker:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–æ–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = await referral_service.get_broker_referral_link(broker.id)
    
    if not referral_link:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await referral_service.get_broker_stats(broker.id)
    
    conversion_display = f"{stats['conversion_rate']}%" if stats['clicks'] > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    text = f"""üîó –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ üëÜ –ö–ª–∏–∫–∏: {stats['clicks']}
‚Ä¢ üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registrations']} 
‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_display}
‚Ä¢ üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_commission']:.2f} —Ä—É–±.

üéØ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:
`{referral_link}`

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏. 
–ö–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º!"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="referral_detailed_stats"
        )],
        [InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥",
            callback_data="regenerate_ref_code"
        )],
        [InlineKeyboardButton(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data="copy_ref_link"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="broker_mode"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "referral_detailed_stats")
async def show_detailed_referral_stats(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    broker = await user_service.get_broker_by_telegram_id(user.telegram_id)
    if not broker:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–æ–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    stats = await referral_service.get_broker_stats(broker.id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    first_click = "–ù–µ—Ç" if not stats['first_click'] else stats['first_click'].strftime('%d.%m.%Y')
    last_click = "–ù–µ—Ç" if not stats['last_click'] else stats['last_click'].strftime('%d.%m.%Y %H:%M')
    
    text = f"""üìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üéØ –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ üëÜ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {stats['clicks']}
‚Ä¢ üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registrations']}
‚Ä¢ ‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {stats['conversions']} 
‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%

üë®‚Äçüíº –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:
‚Ä¢ üìã –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_clients']}
‚Ä¢ üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {stats['active_applications']}

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ üíµ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_commission']:.2f} —Ä—É–±.
‚Ä¢ ‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['paid_commission']:.2f} —Ä—É–±.
‚Ä¢ ‚è≥ –ö –≤—ã–ø–ª–∞—Ç–µ: {stats['total_commission'] - stats['paid_commission']:.2f} —Ä—É–±.

üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:
‚Ä¢ üéØ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫: {first_click}
‚Ä¢ ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫: {last_click}"""

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if stats['recent_clicks']:
        text += "\n\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã (7 –¥–Ω–µ–π):"
        for i, click in enumerate(stats['recent_clicks'][:5]):
            status = "‚úÖ" if click['converted'] else "üëÜ"
            date = click['clicked_at'].strftime('%d.%m %H:%M')
            text += f"\n‚Ä¢ {status} {date}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
            callback_data="broker_ref_link"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()



@router.callback_query(F.data == "regenerate_ref_code")
async def regenerate_referral_code(callback: CallbackQuery, user: User):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if not user or user.role not in [UserRole.BROKER, UserRole.ADMIN]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    broker = await user_service.get_broker_by_telegram_id(user.telegram_id)
    if not broker:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–æ–∫–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    new_code = await referral_service.generate_new_ref_code(broker.id)
    
    if not new_code:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞", show_alert=True)
        return
    
    new_link = f"https://t.me/{referral_service.bot_username}?start={new_code}"
    
    text = f"""üîÑ –ö–û–î –û–ë–ù–û–í–õ–ï–ù!

‚úÖ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{new_code}`
üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: `{new_link}`

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: 
‚Ä¢ –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
            callback_data="broker_ref_link"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!")

@router.callback_query(F.data == "copy_ref_link")
async def copy_referral_link(callback: CallbackQuery):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"""
    
    await callback.answer(
        "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é",
        show_alert=True
    )

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Ä–µ–∂–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu_with_broker_check(callback: CallbackQuery, user: User):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ –±—Ä–æ–∫–µ—Ä–∞"""
    
    # –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏
    fresh_user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if fresh_user and fresh_user.role in [UserRole.BROKER, UserRole.ADMIN]:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤
        name = fresh_user.first_name or callback.from_user.first_name
        text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        from bot.keyboards.inline import get_main_menu_keyboard
        keyboard = get_main_menu_keyboard(fresh_user.role)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        from bot.handlers.documents import back_to_main_menu
        await back_to_main_menu(callback, fresh_user or user)
    
    await callback.answer() 