from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
import logging

from database.models import User, DocumentType
from services.document_service import DocumentService
from services.user_service import UserService
from services.application_service import ApplicationService
from bot.keyboards.inline import (
    get_document_upload_keyboard, 
    get_back_button,
    get_main_menu_keyboard
)
from bot.utils.messages import MESSAGES

logger = logging.getLogger(__name__)
router = Router()

class DocumentStates(StatesGroup):
    waiting_for_document = State()
    selecting_bank = State()

document_service = DocumentService()
user_service = UserService()
application_service = ApplicationService()

@router.callback_query(F.data == "start_diagnosis")
async def start_diagnosis(callback: CallbackQuery, user: User):
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ö–ò"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    permissions = await user_service.check_user_permissions(user)
    if not permissions['can_upload_documents']:
        await callback.message.edit_text(
            MESSAGES["error_no_permission"],
            reply_markup=get_back_button()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        MESSAGES["start_diagnosis_info"],
        reply_markup=get_document_upload_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "my_documents")
async def show_my_documents(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    stats = await document_service.get_documents_stats(user.id)
    documents = await document_service.get_user_documents(user.id)
    
    if not documents:
        text = """üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        
–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç—ã –∏–∑ –ë–ö–ò."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                callback_data="start_diagnosis"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
    else:
        text = f"""üìÑ –í–ê–®–ò –î–û–ö–£–ú–ï–ù–¢–´
        
üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['total']}
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}
‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['total'] - stats['processed']}

üìã –ü–æ —Ç–∏–ø–∞–º:
‚Ä¢ –ù–ë–ö–ò: {stats['by_type'].get('credit_report_nbki', 0)}
‚Ä¢ –û–ö–ë: {stats['by_type'].get('credit_report_okb', 0)}
‚Ä¢ –≠–∫–≤–∏—Ñ–∞–∫—Å: {stats['by_type'].get('credit_report_equifax', 0)}"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        inline_kb = []
        for i, doc in enumerate(documents[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            status_emoji = "‚úÖ" if doc.is_processed else "‚è≥"
            doc_type_name = {
                'credit_report_nbki': '–ù–ë–ö–ò',
                'credit_report_okb': '–û–ö–ë', 
                'credit_report_equifax': '–≠–∫–≤–∏—Ñ–∞–∫—Å',
                'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
                'other': '–î—Ä—É–≥–æ–µ'
            }.get(doc.file_type.value, doc.file_type.value)
            
            inline_kb.append([InlineKeyboardButton(
                text=f"{status_emoji} {doc_type_name} - {doc.file_name[:20]}...",
                callback_data=f"view_doc_{doc.id}"
            )])
        
        inline_kb.extend([
            [InlineKeyboardButton(
                text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ",
                callback_data="start_diagnosis"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("upload_"))
async def handle_upload_type(callback: CallbackQuery, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    upload_type = callback.data.split("_")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document_type_map = {
        "nbki": DocumentType.CREDIT_REPORT_NBKI,
        "okb": DocumentType.CREDIT_REPORT_OKB,
        "equifax": DocumentType.CREDIT_REPORT_EQUIFAX,
        "other": DocumentType.OTHER
    }
    
    document_type = document_type_map.get(upload_type, DocumentType.OTHER)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    type_names = {
        "nbki": "–ù–ë–ö–ò",
        "okb": "–û–ö–ë",
        "equifax": "–≠–∫–≤–∏—Ñ–∞–∫—Å",
        "other": "–¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"
    }
    
    type_name = type_names.get(upload_type, "–¥–æ–∫—É–º–µ–Ω—Ç")
    
    await state.update_data(document_type=document_type)
    await state.set_state(DocumentStates.waiting_for_document)
    
    text = f"""üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ {type_name}

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –∏–∑ –ë–ö–ò
2. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 20 –ú–ë
3. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG

‚ö†Ô∏è –í–∞–∂–Ω–æ: –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏–∑ –ë–ö–ò!"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="back_to_menu"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.message(F.document, StateFilter(DocumentStates.waiting_for_document))
async def handle_document_upload(message: Message, state: FSMContext, user: User, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    if not user:
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        return
    
    document = message.document
    state_data = await state.get_data()
    document_type = state_data.get('document_type', DocumentType.OTHER)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not await document_service.validate_file_format(document.file_name):
        await message.answer(
            MESSAGES["error_wrong_file_format"],
            reply_markup=get_back_button()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if not await document_service.check_file_size(document.file_size):
        size_mb = round(document.file_size / (1024 * 1024), 2)
        await message.answer(
            MESSAGES["error_file_too_large"].format(size=size_mb),
            reply_markup=get_back_button()
        )
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        progress_msg = await message.answer("üì§ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(document.file_id)
        file_data = await bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        saved_document = await document_service.save_document(
            user=user,
            file_data=file_data.read(),
            file_name=document.file_name,
            file_type=document_type
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user_service.log_user_action(
            user.id,
            "document_uploaded",
            {
                "document_id": saved_document.id,
                "file_name": document.file_name,
                "file_type": document_type.value,
                "file_size": document.file_size
            }
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnosis_started = False
        diagnosis_status = ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            application = await application_service.get_user_application(user.id)
            if not application:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
                application = await application_service.create_application(user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if await application_service.check_documents_ready_for_diagnosis(application.id):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                diagnosis_started = await application_service.start_diagnosis(application.id)
                
                if diagnosis_started:
                    diagnosis_status = "\n\nü§ñ GPT –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                else:
                    diagnosis_status = "\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                diagnosis_status = "\n\nüìã –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ë–ö–ò –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            diagnosis_status = "\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
        
        await progress_msg.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if diagnosis_started:
            message_text = f"""‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!

üìÑ –§–∞–π–ª: {document.file_name}
üìä –†–∞–∑–º–µ—Ä: {round(document.file_size / (1024 * 1024), 2)} –ú–ë
üìã –¢–∏–ø: {document_type.value}

üîç GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é...
‚è±Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —á–µ—Ä–µ–∑ 2-5 –º–∏–Ω—É—Ç!"""
        else:
            message_text = f"""‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!
            
üìÑ –§–∞–π–ª: {document.file_name}
üìä –†–∞–∑–º–µ—Ä: {round(document.file_size / (1024 * 1024), 2)} –ú–ë
üìã –¢–∏–ø: {document_type.value}{diagnosis_status}"""
        
        await message.answer(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    callback_data="start_diagnosis"
                )],
                [InlineKeyboardButton(
                    text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data="check_status"
                )],
                [InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_button()
        )

@router.message(StateFilter(DocumentStates.waiting_for_document))
async def handle_wrong_document_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ (PDF, JPG –∏–ª–∏ PNG).\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∞\" –≤—ã—à–µ."
    )

@router.callback_query(F.data.startswith("view_doc_"))
async def view_document_details(callback: CallbackQuery, user: User):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    document_id = int(callback.data.split("_")[2])
    document = await document_service.get_document_by_id(document_id)
    
    if not document or document.user_id != user.id:
        await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if document.is_processed else "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    
    doc_type_name = {
        'credit_report_nbki': '–ù–ë–ö–ò',
        'credit_report_okb': '–û–ö–ë',
        'credit_report_equifax': '–≠–∫–≤–∏—Ñ–∞–∫—Å',
        'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
        'other': '–î—Ä—É–≥–æ–µ'
    }.get(document.file_type.value, document.file_type.value)
    
    text = f"""üìÑ –î–ï–¢–ê–õ–ò –î–û–ö–£–ú–ï–ù–¢–ê

üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {document.file_name}
üìä –¢–∏–ø: {doc_type_name}
üíæ –†–∞–∑–º–µ—Ä: {round(document.file_size / (1024 * 1024), 2)} –ú–ë
üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {document.uploaded_at.strftime('%d.%m.%Y %H:%M')}
‚ö° –°—Ç–∞—Ç—É—Å: {status_text}"""

    if document.is_processed and document.processed_at:
        text += f"\nüïê –û–±—Ä–∞–±–æ—Ç–∞–Ω: {document.processed_at.strftime('%d.%m.%Y %H:%M')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            callback_data=f"delete_doc_{document.id}"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
            callback_data="my_documents"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("delete_doc_"))
async def confirm_delete_document(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    document_id = callback.data.split("_")[2]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=f"confirm_delete_{document_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"view_doc_{document_id}"
            )
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?\n\n"
        "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_document(callback: CallbackQuery, user: User):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    document_id = int(callback.data.split("_")[2])
    document = await document_service.get_document_by_id(document_id)
    
    if not document or document.user_id != user.id:
        await callback.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    success = await document_service.delete_document(document)
    
    if success:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await user_service.log_user_action(
            user.id,
            "document_deleted",
            {
                "document_id": document_id,
                "file_name": document.file_name
            }
        )
        
        await callback.message.edit_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìÑ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    callback_data="my_documents"
                )],
                [InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )]
            ])
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_button()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery, user: User):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    if user:
        name = user.first_name or callback.from_user.first_name
        text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text = MESSAGES["main_menu"]
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu_keyboard(user.role if user else None)
    )
    await callback.answer() 