from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging

from database.models import User, UserRole
from services.broker_auth_service import BrokerAuthService
from services.user_service import UserService

logger = logging.getLogger(__name__)
router = Router()

broker_auth_service = BrokerAuthService()
user_service = UserService()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
ADMIN_TELEGRAM_IDS = [762169219]  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def is_admin(user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    if not user:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –≤ –ë–î
    if user.role == UserRole.ADMIN:
        return True
    
    # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É ID (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
    return user.telegram_id in ADMIN_TELEGRAM_IDS

@router.message(Command("admin"))
async def admin_menu(message: Message, user: User):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    pending_count = len(await broker_auth_service.get_pending_applications())
    
    text = f"""üëë –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨

üìã –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {pending_count}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/applications` - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –±—Ä–æ–∫–µ—Ä–æ–≤
‚Ä¢ `/codes` - –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é
‚Ä¢ `/make_admin @username` - –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
‚Ä¢ `/stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""

    await message.answer(text)

@router.message(Command("applications"))
async def show_applications(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –±—Ä–æ–∫–µ—Ä–æ–≤"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await broker_auth_service.get_pending_applications()
    
    if not applications:
        await message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        return
    
    text = "üìã –ó–ê–Ø–í–ö–ò –ë–†–û–ö–ï–†–û–í –ù–ê –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ò:\n\n"
    
    for app in applications[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        text += f"""#{app.id} | {app.full_name}
üè¢ {app.company or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}
üë§ @{app.username or 'no_username'}

"""
    
    text += f"\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `/app [–Ω–æ–º–µ—Ä]`\n–ü—Ä–∏–º–µ—Ä: `/app {applications[0].id}`"
    
    await message.answer(text)

@router.message(Command("app"))
async def show_application_details(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/app [–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏]`\n–ü—Ä–∏–º–µ—Ä: `/app 1`")
        return
    
    try:
        app_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    application = await broker_auth_service.get_application_by_id(app_id)
    
    if not application:
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    text = f"""üìã –ó–ê–Ø–í–ö–ê –ë–†–û–ö–ï–†–ê #{application.id}

üë§ –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∏—Ç–µ–ª—è:
‚Ä¢ –ò–º—è: {application.full_name}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {application.company or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Telegram: @{application.username or 'no_username'} (ID: {application.telegram_id})

üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
{application.experience or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìÖ –ü–æ–¥–∞–Ω–∞: {application.created_at.strftime('%d.%m.%Y –≤ %H:%M')}
‚ö° –°—Ç–∞—Ç—É—Å: {application.status}

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ `/approve {app_id}` - –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É
‚Ä¢ `/reject {app_id} [–ø—Ä–∏—á–∏–Ω–∞]` - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"""

    await message.answer(text)

@router.message(Command("approve"))
async def approve_application(message: Message, user: User):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/approve [–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`")
        return
    
    try:
        app_id = int(parts[1])
        comment = " ".join(parts[2:]) if len(parts) > 2 else "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞"
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    application = await broker_auth_service.get_application_by_id(app_id)
    if not application:
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if application.status != "pending":
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {application.status})")
        return
    
    try:
        # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
        invite_code = await broker_auth_service.approve_application(
            app_id=app_id,
            admin_user_id=user.id,
            admin_comment=comment
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∑–∞—è–≤–∏—Ç–µ–ª—é
        await send_invite_code_to_user(message.bot, application.telegram_id, invite_code.code)
        
        await message.answer(
            f"""‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!

üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {application.full_name}
üé´ –ö–æ–¥: `{invite_code.code}`
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {invite_code.expires_at.strftime('%d.%m.%Y %H:%M')}

–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞—è–≤–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {app_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")

@router.message(Command("reject"))
async def reject_application(message: Message, user: User):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –±—Ä–æ–∫–µ—Ä–∞"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω—É
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/reject [–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏] [–ø—Ä–∏—á–∏–Ω–∞]`")
        return
    
    try:
        app_id = int(parts[1])
        reason = " ".join(parts[2:]) if len(parts) > 2 else "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    application = await broker_auth_service.get_application_by_id(app_id)
    if not application:
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if application.status != "pending":
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {application.status})")
        return
    
    try:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
        await broker_auth_service.reject_application(
            app_id=app_id,
            admin_user_id=user.id,
            admin_comment=reason
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
        await notify_user_about_rejection(message.bot, application.telegram_id, reason)
        
        await message.answer(
            f"""‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {application.full_name}
üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}

–ó–∞—è–≤–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."""
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {app_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")

@router.message(Command("codes"))
async def create_manual_invite_code(message: Message, user: User):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        invite_code = await broker_auth_service.create_manual_invite_code(
            admin_user_id=user.id,
            expires_days=7
        )
        
        await message.answer(
            f"""üé´ –ò–ù–í–ê–ô–¢-–ö–û–î –°–û–ó–î–ê–ù

üîë –ö–æ–¥: `{invite_code.code}`
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {invite_code.expires_at.strftime('%d.%m.%Y %H:%M')}
üë§ –°–æ–∑–¥–∞–ª: {user.first_name or user.username}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –±—Ä–æ–∫–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
–ê–∫—Ç–∏–≤–∞—Ü–∏—è: `/activate {invite_code.code}`"""
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: {str(e)}")

@router.message(Command("make_admin"))
async def make_user_admin(message: Message, user: User):
    """–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
    await message.answer(
        """üëë –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ê–î–ú–ò–ù–ê

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –º–æ–∂–Ω–æ:
1. –í—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –ë–î: `UPDATE users SET role = 'admin' WHERE telegram_id = ID`
2. –î–æ–±–∞–≤–∏—Ç—å ID –≤ —Å–ø–∏—Å–æ–∫ ADMIN_TELEGRAM_IDS –≤ –∫–æ–¥–µ"""
    )

@router.message(Command("reset_role"))
async def reset_user_role(message: Message, user: User):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/reset_role [telegram_id]`\n–ü—Ä–∏–º–µ—Ä: `/reset_role 762169219`")
        return
    
    try:
        target_telegram_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user = await user_service.get_user_by_telegram_id(target_telegram_id)
    if not target_user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å –Ω–∞ CLIENT
    try:
        from sqlalchemy import update
        from database.database import get_db_session
        from database.models import User as UserModel
        
        async with get_db_session() as session:
            await session.execute(
                update(UserModel)
                .where(UserModel.telegram_id == target_telegram_id)
                .values(role=UserRole.CLIENT)
            )
            await session.commit()
        
        await message.answer(
            f"""‚úÖ –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞!
            
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî Telegram ID: {target_telegram_id}
üîÑ –ù–æ–≤–∞—è —Ä–æ–ª—å: CLIENT

–¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–æ–º."""
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏: {str(e)}")

@router.message(Command("reset_me"))
async def reset_my_role(message: Message, user: User):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user.role == UserRole.CLIENT:
        await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞")
        return
    
    try:
        from sqlalchemy import update
        from database.database import get_db_session
        from database.models import User as UserModel
        
        async with get_db_session() as session:
            await session.execute(
                update(UserModel)
                .where(UserModel.telegram_id == user.telegram_id)
                .values(role=UserRole.CLIENT)
            )
            await session.commit()
        
        await message.answer(
            """‚úÖ –í–∞—à–∞ —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ "–∫–ª–∏–µ–Ω—Ç"!
            
üîÑ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–æ–º
‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üë®‚Äçüíº –°—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä–æ–º"""
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏: {str(e)}")

async def send_invite_code_to_user(bot, telegram_id: int, code: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            telegram_id,
            f"""üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!

‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–æ–º –æ–¥–æ–±—Ä–µ–Ω–∞!

üé´ –í–∞—à –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: `{code}`

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/activate {code}`

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üë®‚Äçüíº"""
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

async def notify_user_about_rejection(bot, telegram_id: int, reason: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    try:
        await bot.send_message(
            telegram_id,
            f"""üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.

üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}") 