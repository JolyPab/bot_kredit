from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database.models import User, UserRole
from services.user_service import UserService
from bot.keyboards.inline import get_faq_keyboard, get_back_button
from bot.utils.messages import MESSAGES

logger = logging.getLogger(__name__)
router = Router()

user_service = UserService()

class SupportStates(StatesGroup):
    waiting_for_message = State()

@router.callback_query(F.data == "show_faq")
async def show_faq_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é FAQ"""
    
    text = """‚ùì –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"""

    await callback.message.edit_text(text, reply_markup=get_faq_keyboard())
    await callback.answer()

@router.callback_query(F.data == "faq_timing")
async def faq_timing(callback: CallbackQuery):
    """FAQ –ø–æ —Å—Ä–æ–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    await callback.message.edit_text(
        MESSAGES["faq_timing"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ FAQ",
                callback_data="show_faq"
            )],
            [InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "faq_documents")
async def faq_documents(callback: CallbackQuery):
    """FAQ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    
    await callback.message.edit_text(
        MESSAGES["faq_documents"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                callback_data="start_diagnosis"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ FAQ",
                callback_data="show_faq"
            )]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "faq_pricing")
async def faq_pricing(callback: CallbackQuery):
    """FAQ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    
    await callback.message.edit_text(
        MESSAGES["faq_pricing"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí¨ –£—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                callback_data="contact_support"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ FAQ",
                callback_data="show_faq"
            )]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "faq_security")
async def faq_security(callback: CallbackQuery):
    """FAQ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    await callback.message.edit_text(
        MESSAGES["faq_security"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                callback_data="privacy_policy"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ FAQ",
                callback_data="show_faq"
            )]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "privacy_policy")
async def privacy_policy(callback: CallbackQuery):
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    text = """üìã –ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò

üîê –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º:

1Ô∏è‚É£ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º AES-256
‚Ä¢ –ö–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏

2Ô∏è‚É£ –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —É—Å–ª—É–≥–∏ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é

3Ô∏è‚É£ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
‚Ä¢ –°–æ–±–ª—é–¥–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¶–ë –†–§
‚Ä¢ –°–ª–µ–¥—É–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

4Ô∏è‚É£ –í–∞—à–∏ –ø—Ä–∞–≤–∞
‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º
‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: support@example.com"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
            callback_data="request_data_deletion"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="faq_security"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "request_data_deletion")
async def request_data_deletion(callback: CallbackQuery, user: User):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    text = """üóë –ó–ê–ü–†–û–° –ù–ê –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ

üìã –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∑–∞–∫–æ–Ω–∞."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            callback_data="contact_support"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="privacy_policy"
        )]
    ])
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    await user_service.log_user_action(
        user.id,
        "data_deletion_requested",
        {"source": "bot_interface"}
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "contact_support")
async def contact_support(callback: CallbackQuery, user: User, state: FSMContext):
    """–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    text = """üí¨ –°–õ–£–ñ–ë–ê –ü–û–î–î–ï–†–ñ–ö–ò

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!

üïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ü–Ω-–ü—Ç 9:00-18:00)

üí° –î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏

üìß Email: support@example.com
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data="write_support_message"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "write_support_message")
async def write_support_message(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    
    await state.set_state(SupportStates.waiting_for_message)
    
    text = """‚úçÔ∏è –ù–ê–ü–ò–°–ê–¢–¨ –í –ü–û–î–î–ï–†–ñ–ö–£

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–µ. –ú—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="contact_support"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.message(StateFilter(SupportStates.waiting_for_message))
async def process_support_message(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    
    if not user:
        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    await user_service.log_user_action(
        user.id,
        "support_message_sent",
        {
            "message": message.text[:200],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            "message_length": len(message.text)
        }
    )
    
    # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ CRM –∏–ª–∏ –Ω–∞ email
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {message.text[:100]}...")
    
    await message.answer(
        """‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û!

–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

üì± –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{support_id}
‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 1-2 —á–∞—Å–∞

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –∏–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!""".format(
            support_id=f"SUP{user.id}{message.message_id}"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data="check_status"
            )],
            [InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
    )
    
    await state.clear()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

@router.callback_query(F.data == "settings")
async def user_settings(callback: CallbackQuery, user: User):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    phone = await user_service.get_user_phone(user)
    email = await user_service.get_user_email(user)
    
    text = f"""‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–ö–ö–ê–£–ù–¢–ê

üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}
üîê –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ü–î: {'‚úÖ –î–∞–Ω–æ' if user.pd_consent else '‚ùå –ù–µ –¥–∞–Ω–æ'}
üìã –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è: {'‚úÖ –î–∞–Ω–æ' if user.application_consent else '‚ùå –ù–µ –¥–∞–Ω–æ'}

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    keyboard_buttons = [
        [InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="user_stats"
        )]
    ]
    
    # –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä–æ–º" —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    if user.role == UserRole.CLIENT:
        keyboard_buttons.append([InlineKeyboardButton(
            text="üë®‚Äçüíº –°—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä–æ–º",
            callback_data="become_broker_demo"
        )])
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.extend([
        [InlineKeyboardButton(
            text="üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è–º–∏",
            callback_data="manage_consents"
        )],
        [InlineKeyboardButton(
            text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            callback_data="contact_support"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "user_stats")
async def user_statistics(callback: CallbackQuery, user: User):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    from services.application_service import ApplicationService
    from services.document_service import DocumentService
    
    app_service = ApplicationService()
    doc_service = DocumentService()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    app_stats = await app_service.get_application_stats(user.id)
    doc_stats = await doc_service.get_documents_stats(user.id)
    
    text = f"""üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìã –ó–∞—è–≤–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ: {app_stats['total']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {app_stats['completed']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {app_stats['in_progress']}

üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {doc_stats['total']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {doc_stats['processed']}
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {doc_stats['total'] - doc_stats['processed']}

üïê –í —Å–∏—Å—Ç–µ–º–µ —Å: {user.created_at.strftime('%d.%m.%Y')}
üì± –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìã –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π",
            callback_data="user_history"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data="settings"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "user_history")
async def user_action_history(callback: CallbackQuery, user: User):
    """–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not user:
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    logs = await user_service.get_user_logs(user.id, limit=10)
    
    text = "üìã –ò–°–¢–û–†–ò–Ø –î–ï–ô–°–¢–í–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
    
    if logs:
        for log in logs:
            date_str = log.created_at.strftime('%d.%m %H:%M')
            action_name = {
                'registration': 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                'document_uploaded': 'üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                'status_refresh': 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞',
                'support_message_sent': 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                'contact_info_updated': 'üìû –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'
            }.get(log.action, log.action)
            
            text += f"‚Ä¢ {date_str} - {action_name}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–µ–π—Å—Ç–≤–∏–π."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üë®‚Äçüíº –°—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä–æ–º (—Ç–µ—Å—Ç)",
            callback_data="become_broker_demo"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data="user_stats"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

 